# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Cargo"""
type Cargo {
  id: ID!
  name: String!
  minimalSumm: Float!
  orders: [Orders!]!
}

"""Orders"""
type Orders {
  id: ID!
  number: String!
  date: DateTime!
  cargoId: Float!
  userId: Float!
  uuid_1c: String
  comment: String!
  cargo: CargoDto
  user: UserDto
  ordersRows: [OrdersRows!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""OrdersRows"""
type OrdersRows {
  id: ID!
  count: Float!
  price: Float!
  orderId: Float!
  productId: Float!
  order: Orders!
  product: Products!
}

"""ProductBrands"""
type ProductBrands {
  id: ID!
  name: String!
  uuid_1c: String!
}

"""ProductCategories"""
type ProductCategories {
  id: ID!
  name: String!
  parentId: Float!
  order: Float!
  uuid_1c: String!
  parent: ProductCategories
  children: [ProductCategories!]!
}

"""ProductImages"""
type ProductImages {
  id: ID!
  url: String!
  default: Boolean!
  uuid_1c: String
  productId: Float
  product: Products!
}

"""ProductProperties"""
type ProductProperties {
  id: ID!
  name: String!
  productPropertiesRows: [ProductPropertiesRows!]!
}

"""ProductPropertiesRows"""
type ProductPropertiesRows {
  id: ID
  value: String
  propertyId: Float
  productId: Float
  product: Products
  property: ProductProperties
}

"""Products"""
type Products {
  id: ID
  deleted: Boolean
  name: String
  code: String
  price: Float
  oldPrice: Float
  uuid_1c: String
  productBrandsId: Float
  productCategoriesId: Float
  documentTsv: String
  createdAt: DateTime
  updatedAt: DateTime
  productBrands: ProductBrands!
  productCategories: ProductBrands!
  basketRows: [BasketRows!]!
  ordersRows: [OrdersRows!]!
  productImages: ProductImages
  productPropertiesRows: [ProductPropertiesRows!]
}

"""BasketRows"""
type BasketRows {
  id: ID!
  count: Float!
  price: Float!
  productId: Float
  basketId: Float
  basket: Basket!
  product: Products!
}

"""Basket"""
type Basket {
  id: ID!
  userId: Float!
  user: Users
  basketRows: [BasketRows!]
}

"""Users"""
type Users {
  id: ID!
  name: String!
  town: String!
  address: String!
  email: String!
  telephone: String!
  role: String!
  uuid_1c: String!
  basket: Basket
  order: [Orders!]
}

type AuthUserDto {
  JWTKey: String!
}

type ValidUserDto {
  id: Float
  JWTKey: String!
  name: String
}

type UserDto {
  id: Float!
  email: String!
  role: String
  name: String
  town: String
  address: String
  telephone: String
  uuid_1c: String
}

type UserUpdateDto {
  updated: Boolean!
}

type BasketRowsDto {
  id: Float
  count: Float
  sum: Float
}

type CargoDto {
  id: Float!
  name: String!
}

type OrdersDto {
  id: Float!
  number: String!
}

type OrdersUpdateUuid1cDto {
  affected: Float!
}

"""Pages"""
type Pages {
  id: ID!
  date: String!
  title: String!
  url: String!
  description: String!
  content: String!
}

type ProductsFiltersDto {
  name: String!
  value: String!
}

type ProductsDto {
  id: Float!
}

type ProductImagesDto {
  id: Float!
}

type ProductImageUploadType {
  success: Boolean
  filename: String
}

type ProductCategoriesDto {
  id: Float!
}

type ProductBrandsDto {
  id: Float!
}

type ProductPropertiesDto {
  id: Float!
}

type ProductPropertiesRowsDto {
  id: Float!
}

type Query {
  login(data: LoginUserInput!): ValidUserDto!
  checkAuth: AuthUserDto!
  getUserById(id: Float!): UserDto!
  getAllUsers: [UserDto!]!
  getBasketById(id: Float!): Basket!
  getBasketByUserId(id: Float!): Basket
  getBasketRowById(id: Float!): BasketRows!
  getBasketRowsByUserId(id: Float!): [BasketRows!]
  getCountsRowsAndSumByUserId(userId: Float!): BasketRowsDto!
  getOrdersById(id: Float!): Orders!
  getOrdersWhithoutUuid1C: [Orders!]!
  getOrdersByUserId(id: Float!): [Orders!]!
  getPageById(id: Float!): Pages!
  getAllPages: [Pages!]!
  getCargoByBasketRowsSum(userId: Float!): [CargoDto!]!
  getProductById(id: Float!): Products!
  getProductByUuid1c(uuid: String!): Products!
  getProductsByProductCtatalogeId(id: Float!): [Products!]!
  getProductsFiltersByProductCtatalogeId(id: Float!): [ProductsFiltersDto!]!
  getFiltredProducts(id: Float!, filters: [FilterProductInput!]!): [Products!]!
  getAllProducts: [Products!]!
  getLastNewsProducts: [Products!]!
  getSearchProducts(search: String!): [Products!]!
  getImagesById(id: Float!): ProductImages!
  getImagesByProductId(id: Float!): [ProductImages!]
  getImagesByUuid1c(uuid: String!): ProductImages!
  getProductCategoriesById(id: Float!): ProductCategories!
  getProductCategoriesByUuid1c(uuid: String!): ProductCategories!
  getAllProductsCategories: [ProductCategories!]!
  getAllRootProductsCategories: [ProductCategories!]!
  getAllChildresnProductsCategoriesByParent(id: Float!): [ProductCategories!]!
  getProductBrandsById(id: Float!): ProductBrands!
  getProductBrandsByUuid1c(uuid: String!): ProductBrands!
  getAllProductsBrands: [ProductBrands!]!
  getAllProductsBrandsArrayId: [ProductBrands!]!
  getProductPropertyById(id: Float!): ProductProperties!
  getProductPropertyByName(name: String!): ProductProperties!
  getAllProductProperties: [ProductProperties!]!
  getProductPropertyRowById(id: Float!): ProductPropertiesRows!
  getProductPropertyRowByProductId(id: Float!): [ProductPropertiesRows!]!
  getProductPropertyRowByProductIdAndProperyId(productId: Float!, propertyId: Float!): ProductPropertiesRows
  getAllProductPropertiesRows: [ProductPropertiesRows!]!
}

input LoginUserInput {
  email: String!
  password: String!
}

input FilterProductInput {
  name: String
  value: String
}

type Mutation {
  registration(data: UserInput!): ValidUserDto!
  update(data: UserUpdateInput!): UserUpdateDto!
  setUserUuid1cById(data: UserUpdateInput!): UserUpdateDto!
  createProductBasketRow(data: BasketRowInput!, userId: Float!): BasketRowsDto!
  deleteProductBasketRowById(userId: Float!, id: Float!): BasketRowsDto!
  createOrder(data: CreateOrderInput!): OrdersDto!
  setOrderUuid1cById(data: setOrder1CUuidInput!): OrdersUpdateUuid1cDto!
  createProduct(data: ProductInput!): ProductsDto!
  UploadProductImage(file: ProductImageUploadInput!): ProductImageUploadType
  CreateProductImages(data: ProductImagesInput!): ProductImagesDto!
  createProductCategories(data: ProductCategoriesInput!): ProductCategoriesDto!
  createProductBrands(data: ProductBrandsInput!): ProductBrandsDto!
  createProductProperty(data: ProductPropertiesInput!): ProductPropertiesDto!
  createProductPropertyRows(data: ProductPropertiesRowsInput!): ProductPropertiesRowsDto!
}

input UserInput {
  email: String!
  name: String
  town: String
  telephone: String
}

input UserUpdateInput {
  id: Float!
  name: String
  town: String
  telephone: String
  uuid_1c: String
}

input BasketRowInput {
  count: Float!
  price: Float!
  productId: Float!
}

input CreateOrderInput {
  cargoId: Float!
  userId: Float!
  comment: String!
}

input setOrder1CUuidInput {
  id: Float!
  uuid_1c: String!
}

input ProductInput {
  deleted: Boolean
  name: String
  code: String
  price: Float
  uuid_1c: String!
  productBrandsId: Float
  productCategoriesId: Float
}

input ProductImageUploadInput {
  file: Upload
}

"""File upload scalar type"""
scalar Upload

input ProductImagesInput {
  url: String
  uuid_1c: String!
  productId: Float
  default: Boolean = false
}

input ProductCategoriesInput {
  name: String
  uuid_1c: String!
  parentId: Float
}

input ProductBrandsInput {
  name: String
  uuid_1c: String!
}

input ProductPropertiesInput {
  name: String
}

input ProductPropertiesRowsInput {
  value: String
  propertyId: Float
  productId: Float
}